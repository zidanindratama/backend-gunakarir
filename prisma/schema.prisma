generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  RECRUITER
  STUDENT
}

enum Status {
  APPROVED
  REJECTED
  PENDING
}

enum Gender {
  MALE
  FEMALE
}

enum JobStatus {
  ACTIVE
  INACTIVE
  CLOSED
}

enum ApplicationStatus {
  SUBMITTED
  UNDER_REVIEW
  PASSED_SCREENING
  FAILED_SCREENING
  INTERVIEW_INVITED
  CONFIRMED_INTERVIEW
  DECLINED_INTERVIEW
  ACCEPTED
  REJECTED
}

enum InterviewMethod {
  ONLINE
  OFFLINE
}

enum InterviewType {
  HR
  MANAGEMENT
}

enum StageType {
  CV_SCREENING
  HR_INTERVIEW
  MANAGEMENT_INTERVIEW
}

enum EducationDegree {
  D3
  S1
  S2
  S3
}

model User {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  email     String  @unique
  username  String  @unique
  password  String?
  image_url String?
  role      Role    @default(STUDENT)

  student   Student?
  recruiter Recruiter?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  OTP OneTimePassword[]
}

model Student {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  user_id String @unique @db.ObjectId
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  NPM           String
  CV_file       String
  KTM_file      String
  fullname      String
  address       String
  phone_number  String
  bio           String
  linkedin_url  String?
  instagram_url String?
  gender        Gender
  status        Status  @default(PENDING)

  province_id String
  city_id     String
  district_id String
  village_id  String

  applications              Application[]
  organizationalExperiences OrganizationalExperience[]
  workExperiences           WorkExperience[]
  educations                Education[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Recruiter {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  user_id String @unique @db.ObjectId
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  NPWP                String  @unique
  company_name        String
  company_logo        String
  company_description String
  contract_file       String
  address             String
  phone_number        String
  linkedin_url        String?
  instagram_url       String?
  rejection_reason    String?
  status              Status  @default(PENDING)

  province_id String
  city_id     String
  district_id String
  village_id  String

  jobs Job[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Job {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  recruiter_id String    @db.ObjectId
  recruiter    Recruiter @relation(fields: [recruiter_id], references: [id], onDelete: Cascade)

  title             String
  short_description String
  full_description  String
  salary            Int
  quota             Int
  application_start DateTime
  application_end   DateTime

  province_id String
  city_id     String

  applications Application[]
  jobMajors    JobMajor[]

  status     JobStatus @default(ACTIVE)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Application {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  job_id String @db.ObjectId
  job    Job    @relation(fields: [job_id], references: [id], onDelete: Cascade)

  student_id String  @db.ObjectId
  student    Student @relation(fields: [student_id], references: [id], onDelete: Cascade)

  status     ApplicationStatus  @default(SUBMITTED)
  interviews Interview[]
  stages     RecruitmentStage[]

  applied_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Interview {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  application_id String      @db.ObjectId
  application    Application @relation(fields: [application_id], references: [id], onDelete: Cascade)

  schedule         DateTime
  confirm_deadline DateTime
  method           InterviewMethod
  type             InterviewType
  link             String?
  location         String?
  notes            String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model RecruitmentStage {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  application_id String      @db.ObjectId
  application    Application @relation(fields: [application_id], references: [id], onDelete: Cascade)

  stage_type StageType
  notes      String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model OrganizationalExperience {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  student_id String  @db.ObjectId
  student    Student @relation(fields: [student_id], references: [id], onDelete: Cascade)

  organization_name String
  position          String
  start_date        DateTime
  end_date          DateTime?
  description       String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model WorkExperience {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  student_id String  @db.ObjectId
  student    Student @relation(fields: [student_id], references: [id], onDelete: Cascade)

  company_name String
  position     String
  start_date   DateTime
  end_date     DateTime?
  description  String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Education {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  student_id String  @db.ObjectId
  student    Student @relation(fields: [student_id], references: [id], onDelete: Cascade)

  degree      EducationDegree
  university  String
  faculty     String
  major       String
  gpa         Float
  start_year  Int
  description String?
  end_year    Int?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model OneTimePassword {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  user_id String @db.ObjectId
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  code       String
  purpose    String
  expires_at DateTime
  used       Boolean  @default(false)

  created_at DateTime @default(now())
}

model Faculty {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String  @unique
  majors Major[]

  created_at DateTime @default(now())
}

model Major {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  faculty_id String  @db.ObjectId
  faculty    Faculty @relation(fields: [faculty_id], references: [id], onDelete: Cascade)

  name      String          @unique
  degree    EducationDegree
  jobMajors JobMajor[]

  created_at DateTime @default(now())
}

model JobMajor {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  job_id String @db.ObjectId
  job    Job    @relation(fields: [job_id], references: [id], onDelete: Cascade)

  major_id String @db.ObjectId
  major    Major  @relation(fields: [major_id], references: [id])

  created_at DateTime @default(now())
}
